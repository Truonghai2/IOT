<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ device.name }} - IoT Monitoring System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body data-device-id="{{ device.id|default('') }}">
<script>console.log('SCRIPT OUTER RUNNING');</script>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">IoT Monitoring System</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/devices">Devices</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row mb-4">
            <div class="col-md-6">
                <h2>{{ device.name }}</h2>
            </div>
            <div class="col-md-6 text-end">
                <button type="button" class="btn btn-warning" onclick="editDevice(deviceId)">
                    <i class="fa fa-edit"></i> Edit Device
                </button>
                <button type="button" class="btn btn-danger" onclick="deleteDevice(deviceId)">
                    <i class="fa fa-trash"></i> Delete Device
                </button>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Device Information</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">
                            <strong>Status:</strong>
                            <span class="badge {% if device.status == 1 %}bg-success{% else %}bg-danger{% endif %}">
                                {{ device.status == 1 ? "ON" : "OFF" }}
                            </span><br>
                            <strong>IP Address:</strong> {{ device.esp_ip }}<br>
                            <strong>Last Seen:</strong> {{ device.last_seen_at ? device.last_seen_at|date('Y-m-d H:i:s') : 'Never' }}
                        </p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Device Control</h5>
                    </div>
                    <div class="card-body">
                        <form id="controlForm">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="status" name="status" 
                                           {% if device.status %}checked{% endif %}>
                                    <label class="form-check-label" for="status">Turn On/Off</label>
                                </div>
                            </div>
                            <button type="button" class="btn btn-primary" onclick="updateControl()">
                                Update Control
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                <div class="row">
                    <!-- Temperature Chart -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Temperature</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="temperatureChart"></canvas>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Humidity Chart -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Humidity</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="humidityChart"></canvas>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Gas Chart -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Gas Level</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="gasChart"></canvas>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Smoke Chart -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Smoke Level</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="smokeChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Device Modal -->
    <div class="modal fade" id="editDeviceModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Device</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editDeviceForm">
                        <div class="mb-3">
                            <label for="name" class="form-label">Device Name</label>
                            <input type="text" class="form-control" id="name" name="name" value="{{ device.name }}" required>
                        </div>
                        <div class="mb-3">
                            <label for="esp_ip" class="form-label">ESP IP Address</label>
                            <input type="text" class="form-control" id="esp_ip" name="esp_ip" value="{{ device.esp_ip }}" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveDevice()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js" defer></script>
    <script>
        // Lấy deviceId từ thuộc tính data của body
        const deviceId = document.body.getAttribute('data-device-id');
        console.log('deviceId:', deviceId);

        // Initialize charts
        function createChart(canvasId, label, color) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: label,
                        data: [],
                        borderColor: color,
                        tension: 0.1,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        }
                    }
                }
            });
        }

        // Create all charts
        const temperatureChart = createChart('temperatureChart', 'Temperature (°C)', 'rgb(255, 99, 132)');
        const humidityChart = createChart('humidityChart', 'Humidity (%)', 'rgb(54, 162, 235)');
        const gasChart = createChart('gasChart', 'Gas Level', 'rgb(75, 192, 192)');
        const smokeChart = createChart('smokeChart', 'Smoke Level', 'rgb(153, 102, 255)');

        updateSensorData();

        function updateChartData(chart, label, value) {
            chart.data.labels.push(label);
            chart.data.datasets[0].data.push(value);
            if (chart.data.labels.length > 10) {
                chart.data.labels.shift();
                chart.data.datasets[0].data.shift();
            }
            chart.update();
        }

        function updateSensorData() {
            fetch(`/api/devices/${deviceId}/sensor-data`)
                .then(response => response.json())
                .then(data => {
                    if (Array.isArray(data.sensor_data)) {
                        temperatureChart.data.labels = [];
                        temperatureChart.data.datasets[0].data = [];
                        humidityChart.data.labels = [];
                        humidityChart.data.datasets[0].data = [];
                        gasChart.data.labels = [];
                        gasChart.data.datasets[0].data = [];
                        smokeChart.data.labels = [];
                        smokeChart.data.datasets[0].data = [];
                        data.sensor_data.slice().reverse().forEach(sensor => {
                            const timestamp = new Date(sensor.created_at).toLocaleTimeString();
                            updateChartData(temperatureChart, timestamp, sensor.temperature);
                            updateChartData(humidityChart, timestamp, sensor.humidity);
                            updateChartData(gasChart, timestamp, sensor.gas);
                            updateChartData(smokeChart, timestamp, sensor.smoke);
                        });
                    } else if (data.sensor_data) {
                        const timestamp = new Date(data.sensor_data.created_at).toLocaleTimeString();
                        updateChartData(temperatureChart, timestamp, data.sensor_data.temperature);
                        updateChartData(humidityChart, timestamp, data.sensor_data.humidity);
                        updateChartData(gasChart, timestamp, data.sensor_data.gas);
                        updateChartData(smokeChart, timestamp, data.sensor_data.smoke);
                    }
                })
                .catch(error => console.error('Error:', error));
        }


        function editDevice(id) {
            const modal = new bootstrap.Modal(document.getElementById('editDeviceModal'));
            modal.show();
        }

        function saveDevice() {
            const form = document.getElementById('editDeviceForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            fetch(`/api/devices/${deviceId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    location.reload();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the device');
            });
        }

        function deleteDevice(id) {
            if (confirm('Are you sure you want to delete this device?')) {
                fetch(`/api/devices/${deviceId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        window.location.href = '/devices';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the device');
                });
            }
        }

        function updateControl() {
            const status = document.getElementById('status').checked ? 1 : 0;
            fetch(`/api/devices/${deviceId}/control`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    location.reload();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the device control');
            });
        }

        window.OneSignalDeferred = window.OneSignalDeferred || [];
        OneSignalDeferred.push(async function(OneSignal) {
            await OneSignal.init({
                appId: "f41bdea2-508a-4082-9951-e77411fa9f53",
            });
        });

        // --- WebSocket realtime update ---
        function connectWebSocket() {
            const wsProtocol = location.protocol === 'https:' ? 'wss' : 'ws';
            const ws = new WebSocket(`${wsProtocol}://${location.hostname}:8080`);
            ws.onopen = function() {
                console.log('WebSocket connected');
                ws.send(JSON.stringify({ action: 'subscribe', device_id: deviceId }));
            };
            ws.onerror = function(e) {
                console.error('WebSocket error', e);
            };
            ws.onclose = function() {
                console.log('WebSocket closed, reconnecting in 2s...');
                setTimeout(connectWebSocket, 2000);
            };
            ws.onmessage = function(event) {
                console.log('WebSocket raw event:', event);
                try {
                    const message = JSON.parse(event.data);
                    console.log('WebSocket parsed:', message, 'FE device_id:', deviceId);
                    if (message.event === 'sensor_update' && message.device_id == deviceId) {
                        const sensor = message.data;
                        const timestamp = new Date(sensor.created_at).toLocaleTimeString();
                        updateChartData(temperatureChart, timestamp, sensor.temperature);
                        updateChartData(humidityChart, timestamp, sensor.humidity);
                        updateChartData(gasChart, timestamp, sensor.gas);
                        updateChartData(smokeChart, timestamp, sensor.smoke);
                    }
                } catch (e) {
                    console.error('WebSocket message error:', e);
                }
            };
        }
        connectWebSocket();
    </script>
</body>
</html> 